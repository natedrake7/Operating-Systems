Λαμπρόπουλος Κωνσταντίνος

Στην εργασία αυτή ζητήθηκε να υλοποιηθεί ένα πρόγραμμα με σκοπό τον συγ-
χρονισμό πολλών processes (IPC).Η λειτουργία το παρόντος προγράμματος είναι η
επικοινωνία της μητρικής διεργασίας (η οποία δημιουργείται όταν κάνουμε execute
το πρόγραμμα) μ’ένα σύνολο παιδιών (ο αριθμός των οποίων δίνεται σαν όρισμα
από την γραμμή εντολών). Ειδικότερα ένα παράδειγμα εκτέλεσης του προγράμμα-
τος είναι το εξής :
.\main -p PROCESS_VAL -t TEXT_FILE -r REQUEST_VAL -g GRAGING,
όπου : PROCESS_VAL ο αριθμός των διεργασιών,TEXT_FILE το όνομα του κειμέ-
νου που θα διαβαστεί,REQUEST_VAL ο αριθμός των αιτημάτων που θα διεκπαι-
ρεώσει η κάθε διεργασία και GRADING ο βαθμός κατάτμησης (από πόσες γραμμές
θα αποτελούνται τα segments που θα χωριστεί το αρχείο κειμένου).Άμα δωθούν λά-
θος τα ορίσματα θα υπάρχει undefined behaviour.Αν δεν δωθούν όλα τα ορίσματα
θα υπάρχει τερματισμός του προγράμματος.
Η λογική του προγράμματος είναι ότι το parent process παίρνει τα ορίσματα από την
γραμμή εντολών,δημιουργεί ένα logfile για τους χρόνους διεκπαιρέωσης των αιτη-
μάτων, διαγράφει αν υπάρχουν παλιά logfiles (και δικά του και των υπόλοιπων
processes,τα οποία αποθηκεύονται στον φάκελο logfiles που δημιουργείται μόνος
του στο current directory), και δημιουργεί ένα αρχείο που λέγεται temp.Το αρχείο
temp είναι ο τρόπος αποστολής και παραλαβής αντίστοιχα των αιτημάτων των
παιδιών από των πατέρα,ενώ όλη η υπόλοιπη επικοινωνία γίνεται μέσω pipes.Η
επιλογή αυτή έγινε γιατί αν δίαβαζα τα αιτήματα των παιδιών μέσω pipes υπήρχε
το θέμα ότι η read() συνάρτηση μπλοκάρει μέχρι να λάβει input και επίσης χάνεται
η λογική του FIFO, γιατί πάντα το process[0] θα γράφει πρώτο.Το temp file διαγρά-
φεται αυτόματα με τον τερματισμό του προγράμματος.Το πρόγραμμα τερματίζει
όταν ο πατέρας σταματήσει να λαμβάνει input από τα παιδιά και οπότε περιμένει
να τερματίσουν ,καθαρίζει τον χώρο (destroy shared memory,semaphores) και τερμα-
τίζει το πρόγραμμα.Για περισσότερες λεπτομέρειες υπάρχει ένα README.pdf αρχείο.