Λαμπρόπουλος Κωνσταντίνος

Υπάρχουν makefiles σε κάθε ένα folder (client,server) για το κάθε ένα αντίστοιχα και γίνονται compile με την εντολή make.Το παρόν πρόγραμμα δημιουργεί ένα local server και ένα local client τα οποία επικοινωνούν μέσω TCP connection και ο server τρέχει επ'αόριστον.Η λειτουργία του είναι να δέχεται αιτήματα ο server από πολλαπλούς clients ,στα οποία ζητούνται αρχεία που βρίσκονται στο folder που είναι ο server και να τα επιστρέφει στον client.
Μια ενδεικτική εκτέλεση είναι : 
./remoteclient -p 2020 -d folder1 -i 127.0.0.1
όπου με την παράμμετρο -p ορίζεται σε ποιό port θα συνδεθεί,με την -d ποιο folder ζητάει ο client και με το -i το ip του server(εδώ δεν υπάρχει συγκεκριμένο).
./dataserver -p 2020 -s 10 -q 8 -b 512
όπου η παράμμετρος -p πάλι είναι το port στο οποίο θα γίνει initialize ο server,η -s για το πόσα worker threads(η λειτουργία τους περιγράφεται παρακάτω)
θα υπάρχουν ,η -q για την ουρά που θα υπάρχει ώστε να εκτελούνται τα requests και η -b για το blocksize ,δηλαδή το πόσα bytes θα στέλνει κάθε φορά στον client.

Σχεδιαστικές επιλογές : 

Αν τα makefiles  δεν δουλεύουν ο server γίνεται compile με το command : g++ dataserver.cpp threads.cpp -lpthread -o dataserver,
και ο client : g++ -o remoteclient remoteclient.cpp

Στον κώδικα έχω προσθέσει σχόλια για να είναι πιο εύκολη η ανάγνωσή του.

Dataserver : 

1)WorkerThreads : Ξεκινάνε πριν γίνει initialized ο server.Είναι σε ενα infinite while loop μιας και ο server υποθέτουμε οτι τρέχει για πάντα.
Δεν υλοποιήθηκε να στέλνει το περιεχόμενο των αρχείων ,παρά μόνο το όνομα του αρχείου.
Λειτουργούν με τα semaphores για να περιμένουν να λάβουν ενημέρωση ότι υπάρχει διαθέσιμο file στο queue.Δεν γίνονται join ή detach μιας και δεν σταματάει να δουλεύει ο dataserver.
Υπάρχουν σχόλια,προσπάθειας υλοποίησης του να στέλνονται και τα δεδομένα των αρχείων,αλλά για να φανεί η καλή λειτουργία του υπόλοιπου κώδικα,τα έχω αφήσει σχόλια.

2)Communication Threads : Δημιουργείται ένα για κάθε client.Βρίσκουν αν υπάρχει το directory που ζητάει ο client.Αν υπάρχει,αναδρομικά βρίσκουν κάθε αρχείο του directory
και το προσθέτουν στην ουρά,η οποία ελέγχεται με semaphores ,ώστε να μην ξεπερνάει το μέγεθός της.Είναι υλοποιημένη και η χρήση των mutexes και στα WorkerThreads ώστε να μην
κάνουν ταυτόχρονα access shared memory πολλά threads.Επίσης στέλνουν το πόσα αρχεία υπάρχουν στο ζητούμενο directory,στον client,ώστε να ξέρει πότε να σπασει το loop του.
Τέλος περιμένουν απάντηση από τον client ότι δέχθηκε όλα τα αρχεία ώστε να κλείσουν το file descriptor (για να μην τελειώσουν τα διαθέσιμα file descriptors).

3)Server: Ο server δέχεται connection requests απο clients,τα αποδέχεται,στέλνει το blocksize σε κάθε client ώστε να το ξέρει απο πριν,και έπειτα δημιουργεί τα Communication Threads.

RemoteClient :

Δημιουργεί το socket ,δέχεται το packet size και σ'ένα infinite while loop διαβάζει συνεχώς μέχρι blocksize bytes.
Το loop τερματίζει όταν έχει δεχθεί τον αριθμό των αρχείων που πρέπει να έχει,και έχει δημιουργήσει τόσα αρχεία.
Πάλι υπάρχουν σχόλια κώδικα που ήταν η προσπάθειά μου για να δέχεται και το περιεχόμενο των αρχείων,αλλά πάλι για να φαίνεται η λειτουργία του
υπόλοιπου προγράμματος,το άφησα σε σχόλια.

Έχω χωρίσει τα .cpp αρχεία σε φακέλους client και server,και στον κάθε φάκελο υπάρχει το αντίστοιχο makefile.
